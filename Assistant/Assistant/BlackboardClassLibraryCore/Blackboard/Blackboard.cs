//-----------------------------------------------------------------------

// <copyright file="Blackboard.cs" company="Breanos GmbH">
// Copyright Notice:
// DAIPAN - This file, program or part of a program is considered part of the DAIPAN framework by Breanos GmbH for Industrie 4.0
// Published in 2018 by Gerhard Eder gerhard.eder@breanos.com and Achim Bernhard achim.bernhard@breanos.com
// To the extent possible under law, the publishers have dedicated all copyright and related and neighboring rights to this software to the public domain worldwide. This software is distributed without any warranty.
// You should have received a copy of the CC0 Public Domain Dedication along with this software. If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.
// <date>Monday, December 3, 2018 3:34:35 PM</date>
// </copyright>

//-----------------------------------------------------------------------

///////////////////////////////////////////////////////////
//  Blackboard.cs
//  Implementation of the Class Blackboard
//  Generated by Enterprise Architect
//  Created on:      02-Feb-2018 10:26:51
//  Original author: bezdedeanu
///////////////////////////////////////////////////////////

using AssistantUtilities;
using BlackboardClassLibrary.Commands;
using NLog;
using System.Collections.Concurrent;

namespace BlackboardClassLibrary.Blackboard
{
    /// <summary>
    /// This is our blackboard objects. Here is the implementation of the Blackbord pattern.
    /// https://en.wikipedia.org/wiki/Blackboard_(design_pattern)
    /// 
    /// </summary>
    public class Blackboard
    {
        public const string BlackboardLoggerKey = "BlackBoardLogger";
        private static BreanosLogger logger; //= LogManager.GetCurrentClassLogger();

        /// <summary>
        /// In this concurrency queue are stored all the Message objects.
        /// </summary>
        public ConcurrentQueue<IObject> MessageObjects { get; set; } = new ConcurrentQueue<IObject>();

        /// <summary>
        /// The public ctor of the Blackboard class
        /// </summary>
        public Blackboard()
        {
            if (logger == null) logger = BreanosLoggerFactory.DuplicateGet(BlackboardLoggerKey,nameof(Blackboard));
        }

        /// <summary>
        /// Adds a Blackboard object to the Blackboard
        /// </summary>
        /// <param name="source">The reference to the source object ob the Blackboard command</param>
        /// <param name="objectType">Specifies the object type of the Blackboard command</param>
        /// <param name="objectBase">The Blackboard command which has to be added to the blackboard. It is put into a InputObject envelope object</param>
        public void AddObject(object source, ObjectType objectType, ObjectBase objectBase)
        {
            if (source is null || objectBase is null)
            {
                logger.Trace("AddObject called with not initialized parameters");
            }

            if (objectBase is IncomingObject)
            {
                logger.Trace("AddObject type is IncomingObject");
            }

            IncomingObject obj = new IncomingObject(source, objectType, objectBase);
            obj.Stage = ProcessingStage.Queued;
            MessageObjects.Enqueue(obj);
        }
    }//end Blackboard
}
