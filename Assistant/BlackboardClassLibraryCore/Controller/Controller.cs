//-----------------------------------------------------------------------

// <copyright file="Controller.cs" company="Breanos GmbH">
// Copyright Notice:
// DAIPAN - This file, program or part of a program is considered part of the DAIPAN framework by Breanos GmbH for Industrie 4.0
// Published in 2018 by Gerhard Eder gerhard.eder@breanos.com and Achim Bernhard achim.bernhard@breanos.com
// To the extent possible under law, the publishers have dedicated all copyright and related and neighboring rights to this software to the public domain worldwide. This software is distributed without any warranty.
// You should have received a copy of the CC0 Public Domain Dedication along with this software. If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.
// <date>Tuesday, October 30, 2018 1:26:47 PM</date>
// </copyright>

//-----------------------------------------------------------------------

///////////////////////////////////////////////////////////
//  Controller.cs
//  Implementation of the Class Controller
//  Generated by Enterprise Architect
//  Created on:      02-Feb-2018 10:26:50
//  Original author: bezdedeanu
///////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.Linq;
using NLog;
using BlackboardClassLibrary.KnowledgeSources;
using System.Threading.Tasks;
using AssistantUtilities;

namespace BlackboardClassLibrary.Controller
{
    /// <summary>
    /// Controller class
    /// </summary>
    public class Controller
    {
        /// <summary>
        /// NLog-Logger
        /// </summary>
        //private static Logger logger = LogManager.GetCurrentClassLogger();
        private static BreanosLogger logger;

        /// <summary>
        /// The blackboard variable
        /// </summary>
        private Blackboard.Blackboard blackboard;
        /// <summary>
        /// List of KnowledgeSources
        /// </summary>
        private List<IKnowledgeSource> KnowledgeSources = new List<IKnowledgeSource>();
        /// <summary>
        /// Here are the KnowledgeSources in sorted order. Ordered by priority
        /// </summary>
        private List<IKnowledgeSource> OrderedKnowledgeSources;

        /// <summary>
        /// Public constructor of Controller
        /// </summary>
        public Controller()
        {
            if (logger == null) logger = BreanosLoggerFactory.DuplicateGet(Blackboard.Blackboard.BlackboardLoggerKey,nameof(Controller));
        }

        /// <summary>
        /// Function to order all OrderedKnowledgeSources
        /// </summary>
        private void OrderKnowledgeBases()
        {
            OrderedKnowledgeSources = new List<IKnowledgeSource>(from ks in KnowledgeSources
                                                                 where ks.Priority > KnowledgeSourcePriority.Disabled
                                                                 orderby ks.Priority
                                                                 select ks);
        }

        /// <summary>
        /// Public ctor for the controller
        /// </summary>
        /// <param name="blackboard">Takes a blackboard reference in the constructor</param>
        public Controller(Blackboard.Blackboard blackboard, string jsonDirectory)
        {
            this.blackboard = blackboard;

            /*ServiceBusMessages serviceBusMessage = new ServiceBusMessages() { IsEnabled = false };//KS
            KnowledgeSources.Add(serviceBusMessage);*/
            BreanosServiceBusMessages breanosServiceBusMessages1 = new BreanosServiceBusMessages("queue://LineTopic_1", "Sub2", string.Empty, jsonDirectory) { IsEnabled = false };//KS;
            KnowledgeSources.Add(breanosServiceBusMessages1);

            //BreanosServiceBusMessages breanosServiceBusMessages2 = new BreanosServiceBusMessages("PoC_SB_Topic2", "Sub2", string.Empty) { IsEnabled = false };//KS;
            //KnowledgeSources.Add(breanosServiceBusMessages2);

            //BreanosServiceBusMessages breanosServiceBusMessages3 = new BreanosServiceBusMessages("PoC_SB_Topic3", "Sub3", string.Empty) { IsEnabled = false };//KS;
            //KnowledgeSources.Add(breanosServiceBusMessages3);

            //BreanosServiceBusMessages breanosServiceBusMessages4 = new BreanosServiceBusMessages("PoC_SB_Topic4", "Sub4", string.Empty) { IsEnabled = false };//KS;
            //KnowledgeSources.Add(breanosServiceBusMessages4);

            //InitSFA initSFA = new InitSFA();
            //KnowledgeSources.Add(initSFA);
           
            OrderKnowledgeBases();

            foreach (var ks in OrderedKnowledgeSources)
                ks.Configure(blackboard);
        }

        /// <summary>
        /// Diese Methode Startet die Nachrichtenverarbeitung
        /// </summary>
        public void StartProcessing()
        {
            logger.Debug("StartProcessing called in controller");

            Task.Factory.StartNew(() =>
            {
                logger.Debug("Start new Task in StartProcessing");

                while (true)
                {
                    foreach (IKnowledgeSource ks in OrderedKnowledgeSources)
                        if (ks.IsEnabled)
                            ks.ExecuteAction();
                }
            });
        }
    }//end Controller
}
