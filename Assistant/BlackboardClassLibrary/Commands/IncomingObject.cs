//-----------------------------------------------------------------------

// <copyright file="IncomingObject.cs" company="Breanos GmbH">
// Copyright Notice:
// DAIPAN - This file, program or part of a program is considered part of the DAIPAN framework by Breanos GmbH for Industrie 4.0
// Published in 2018 by Gerhard Eder gerhard.eder@breanos.com and Achim Bernhard achim.bernhard@breanos.com
// To the extent possible under law, the publishers have dedicated all copyright and related and neighboring rights to this software to the public domain worldwide. This software is distributed without any warranty.
// You should have received a copy of the CC0 Public Domain Dedication along with this software. If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.
// <date>Tuesday, October 30, 2018 1:26:47 PM</date>
// </copyright>

//-----------------------------------------------------------------------

///////////////////////////////////////////////////////////
//  IncomingObject.cs
//  Implementation of the Class IncomingObject
//  Generated by Enterprise Architect
//  Created on:      02-Feb-2018 10:26:51
//  Original author: bezdedeanu
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using NLog;
using AssistantUtilities;

namespace BlackboardClassLibrary.Commands
{
    /// <summary>
    /// Incoming Object is the envelope object for all blackboard commands
    /// </summary>
    public class IncomingObject : ObjectBase
    {

        private static BreanosLogger logger;
        /// <summary>
        /// The command Object which is encapsulated by the IncomingObject object
        /// </summary>
        IObject actuaIncomminglObject;

        /// <summary>
        /// The source who sent the command object
        /// </summary>
        object sourceObject;

        /// <summary>
        /// Public constructor for the IncomingObject 
        /// </summary>
        /// <param name="source">The source who sent the command object</param>
        /// <param name="objectType">Enum which defines the object type</param>
        /// <param name="incommingObject">Command object which has to be encapsulated</param>
        public IncomingObject(object source, ObjectType objectType, ObjectBase incommingObject)
        {
            if (logger == null) logger = BreanosLoggerFactory.DuplicateGet(Blackboard.Blackboard.BlackboardLoggerKey, nameof(IncomingObject));
            actuaIncomminglObject = incommingObject;
            sourceObject = source;
            Type = objectType;
            logger.Trace("IncomingObject constructor");
        }

        /// <summary>
        /// Destructor
        /// </summary>
        ~IncomingObject()
        {

        }

        /// <summary>
        /// Returns the actual encapsulated object
        /// </summary>
        /// <returns>The actual encapsulated object</returns>
        public IObject GetActualObject()
        {
            return actuaIncomminglObject;
        }

    }//end IncomingObject
}
